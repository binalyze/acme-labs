services:
  # Workstation containers (ubuntu based)
  workstation-1:
    image: ubuntu:latest
    container_name: workstation-1
    hostname: WORKSTATION-1
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-2:
    image: ubuntu:latest
    container_name: workstation-2
    hostname: WORKSTATION-2
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-3:
    image: ubuntu:latest
    container_name: workstation-3
    hostname: WORKSTATION-3
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-4:
    image: ubuntu:latest
    container_name: workstation-4
    hostname: WORKSTATION-4
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-5:
    image: ubuntu:latest
    container_name: workstation-5
    hostname: WORKSTATION-5
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-6:
    image: ubuntu:latest
    container_name: workstation-6
    hostname: WORKSTATION-6
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-7:
    image: ubuntu:latest
    container_name: workstation-7
    hostname: WORKSTATION-7
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-8:
    image: ubuntu:latest
    container_name: workstation-8
    hostname: WORKSTATION-8
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-9:
    image: ubuntu:latest
    container_name: workstation-9
    hostname: WORKSTATION-9
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  workstation-10:
    image: ubuntu:latest
    container_name: workstation-10
    hostname: WORKSTATION-10
    privileged: true
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
    command: /bin/bash /app/deploy.sh
    restart: unless-stopped
    
  # Web Servers & Application Servers
  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: NGINX
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - nginx_data:/var/www/html
    command: /bin/bash -c "bash /app/deploy.sh && nginx -g 'daemon off;'"
    restart: unless-stopped
    
  httpd:
    image: httpd:latest
    container_name: httpd
    hostname: HTTPD
    ports:
      - "8081:80"
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - httpd_data:/usr/local/apache2/htdocs
    command: /bin/bash -c "bash /app/deploy.sh && httpd-foreground"
    restart: unless-stopped
    
  tomcat:
    image: tomcat:latest
    container_name: tomcat
    hostname: TOMCAT
    ports:
      - "8082:8080"
    environment:
      - CATALINA_OPTS=-Xmx512m
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - tomcat_data:/usr/local/tomcat/webapps
    command: /bin/bash -c "bash /app/deploy.sh && catalina.sh run"
    restart: unless-stopped
        
  # Databases        
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: POSTGRES
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=airlab
      - POSTGRES_USER=airlab
      - POSTGRES_PASSWORD=airlab123
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - postgres_data:/var/lib/postgresql/data
    command: /bin/bash -c "bash /app/deploy.sh && docker-entrypoint.sh postgres"
    restart: unless-stopped
    
  mongo:
    image: mongo:latest
    container_name: mongo
    hostname: MONGO
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=airlab
      - MONGO_INITDB_ROOT_PASSWORD=airlab123
      - MONGO_INITDB_DATABASE=airlab
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - mongo_data:/data/db
    command: /bin/bash -c "bash /app/deploy.sh && docker-entrypoint.sh mongod"
    restart: unless-stopped
    
  redis:
    image: redis:latest
    container_name: redis
    hostname: REDIS
    ports:
      - "6379:6379"
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - redis_data:/data
    command: /bin/bash -c "bash /app/deploy.sh && redis-server --appendonly yes"
    restart: unless-stopped
        
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    hostname: CASSANDRA
    ports:
      - "9042:9042"
      - "9160:9160"
    environment:
      - CASSANDRA_CLUSTER_NAME=AirLab
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - cassandra_data:/var/lib/cassandra
    command: /bin/bash -c "bash /app/deploy.sh && docker-entrypoint.sh cassandra -f"
    restart: unless-stopped
    
  # Message Queues & Streaming
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: RABBITMQ
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=airlab
      - RABBITMQ_DEFAULT_PASS=airlab123
    volumes:
      - ./deploy.sh:/app/deploy.sh:ro
      - ./.env.local:/app/.env.local:ro
      - rabbitmq_data:/var/lib/rabbitmq
    command: /bin/bash -c "bash /app/deploy.sh && docker-entrypoint.sh rabbitmq-server"
    restart: unless-stopped
            
volumes:
  nginx_data:
  httpd_data:
  tomcat_data:
  postgres_data:
  mongo_data:
  redis_data:
  cassandra_data:
  rabbitmq_data: